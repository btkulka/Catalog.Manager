//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Catalog.Facade.BUILDERCatalog {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FunctionResult", Namespace="http://schemas.datacontract.org/2004/07/ERDC.CERL.SMS.Libraries.DataContract.Comm" +
        "on")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Catalog.Facade.BUILDERCatalog.SystemCatalogResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Catalog.Facade.BUILDERCatalog.ComponentCatalogResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Catalog.Facade.BUILDERCatalog.CMCResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Catalog.Facade.BUILDERCatalog.MaterialCategoryCatalogResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Catalog.Facade.BUILDERCatalog.ComponentTypeCatalogResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Catalog.Facade.BUILDERCatalog.SubComponentCatalogResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Catalog.Facade.BUILDERCatalog.IntResult))]
    public partial class FunctionResult : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Catalog.Facade.BUILDERCatalog.FunctionResultMessage StatusField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Catalog.Facade.BUILDERCatalog.FunctionResultMessage Status {
            get {
                return this.StatusField;
            }
            set {
                if ((this.StatusField.Equals(value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SystemCatalogResult", Namespace="http://schemas.datacontract.org/2004/07/ERDC.CERL.SMS.Libraries.DataContract.Cata" +
        "log")]
    [System.SerializableAttribute()]
    public partial class SystemCatalogResult : Catalog.Facade.BUILDERCatalog.FunctionResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Catalog.Facade.BUILDERCatalog.SystemCatalogDescription[] SystemCatalogField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Catalog.Facade.BUILDERCatalog.SystemCatalogDescription[] SystemCatalog {
            get {
                return this.SystemCatalogField;
            }
            set {
                if ((object.ReferenceEquals(this.SystemCatalogField, value) != true)) {
                    this.SystemCatalogField = value;
                    this.RaisePropertyChanged("SystemCatalog");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ComponentCatalogResult", Namespace="http://schemas.datacontract.org/2004/07/ERDC.CERL.SMS.Libraries.DataContract.Cata" +
        "log")]
    [System.SerializableAttribute()]
    public partial class ComponentCatalogResult : Catalog.Facade.BUILDERCatalog.FunctionResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Catalog.Facade.BUILDERCatalog.ComponentCatalogDescription[] ComponentCatalogField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Catalog.Facade.BUILDERCatalog.ComponentCatalogDescription[] ComponentCatalog {
            get {
                return this.ComponentCatalogField;
            }
            set {
                if ((object.ReferenceEquals(this.ComponentCatalogField, value) != true)) {
                    this.ComponentCatalogField = value;
                    this.RaisePropertyChanged("ComponentCatalog");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CMCResult", Namespace="http://schemas.datacontract.org/2004/07/ERDC.CERL.SMS.Libraries.DataContract.Cata" +
        "log")]
    [System.SerializableAttribute()]
    public partial class CMCResult : Catalog.Facade.BUILDERCatalog.FunctionResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Catalog.Facade.BUILDERCatalog.CMCDescription[] CMCCatalogField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Catalog.Facade.BUILDERCatalog.CMCDescription[] CMCCatalog {
            get {
                return this.CMCCatalogField;
            }
            set {
                if ((object.ReferenceEquals(this.CMCCatalogField, value) != true)) {
                    this.CMCCatalogField = value;
                    this.RaisePropertyChanged("CMCCatalog");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MaterialCategoryCatalogResult", Namespace="http://schemas.datacontract.org/2004/07/ERDC.CERL.SMS.Libraries.DataContract.Cata" +
        "log")]
    [System.SerializableAttribute()]
    public partial class MaterialCategoryCatalogResult : Catalog.Facade.BUILDERCatalog.FunctionResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Catalog.Facade.BUILDERCatalog.MaterialCategoryDescription[] MatCatCatalogField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Catalog.Facade.BUILDERCatalog.MaterialCategoryDescription[] MatCatCatalog {
            get {
                return this.MatCatCatalogField;
            }
            set {
                if ((object.ReferenceEquals(this.MatCatCatalogField, value) != true)) {
                    this.MatCatCatalogField = value;
                    this.RaisePropertyChanged("MatCatCatalog");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ComponentTypeCatalogResult", Namespace="http://schemas.datacontract.org/2004/07/ERDC.CERL.SMS.Libraries.DataContract.Cata" +
        "log")]
    [System.SerializableAttribute()]
    public partial class ComponentTypeCatalogResult : Catalog.Facade.BUILDERCatalog.FunctionResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Catalog.Facade.BUILDERCatalog.ComponentTypeDescription[] CompTypeCatalogField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Catalog.Facade.BUILDERCatalog.ComponentTypeDescription[] CompTypeCatalog {
            get {
                return this.CompTypeCatalogField;
            }
            set {
                if ((object.ReferenceEquals(this.CompTypeCatalogField, value) != true)) {
                    this.CompTypeCatalogField = value;
                    this.RaisePropertyChanged("CompTypeCatalog");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SubComponentCatalogResult", Namespace="http://schemas.datacontract.org/2004/07/ERDC.CERL.SMS.Libraries.DataContract.Cata" +
        "log")]
    [System.SerializableAttribute()]
    public partial class SubComponentCatalogResult : Catalog.Facade.BUILDERCatalog.FunctionResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Catalog.Facade.BUILDERCatalog.SubComponentDescription[] SubCompCatalogField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Catalog.Facade.BUILDERCatalog.SubComponentDescription[] SubCompCatalog {
            get {
                return this.SubCompCatalogField;
            }
            set {
                if ((object.ReferenceEquals(this.SubCompCatalogField, value) != true)) {
                    this.SubCompCatalogField = value;
                    this.RaisePropertyChanged("SubCompCatalog");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="IntResult", Namespace="http://schemas.datacontract.org/2004/07/ERDC.CERL.SMS.Libraries.DataContract.Comm" +
        "on")]
    [System.SerializableAttribute()]
    public partial class IntResult : Catalog.Facade.BUILDERCatalog.FunctionResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int DataField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Data {
            get {
                return this.DataField;
            }
            set {
                if ((this.DataField.Equals(value) != true)) {
                    this.DataField = value;
                    this.RaisePropertyChanged("Data");
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FunctionResultMessage", Namespace="http://schemas.datacontract.org/2004/07/ERDC.CERL.SMS.Libraries.DataContract.Comm" +
        "on")]
    public enum FunctionResultMessage : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Failed = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Success = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NotLoggedIn = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ScenarioDoesntExist = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SiteDoesntExist = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        OrganizationDoesntExist = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidPermissions = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PolicySequenceDoesntExist = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ConditionStandardDoesntExist = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FunctionalityStandardDoesntExist = 9,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PolicyDoesntExist = 10,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NotYetImplemented = 11,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PrioritizationSchemeDoesntExist = 12,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CanCopyWorkItems = 13,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidName = 14,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        StandardDoesntExist = 15,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PolicySequenceDoesntMatch = 16,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PrioritizationSchemeDoesntMatch = 17,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CostBookDoesntMatch = 18,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ServiceLifeBookDoesntMatch = 19,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InflationSetDoesntMatch = 20,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AccountDisabled = 21,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AssessmentDoesntExist = 22,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AssessmentInstanceDoesntExist = 23,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NoSummariesExist = 24,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FunctionalAreaDoesntExist = 25,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ComponentSectionDoesntExist = 26,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ValueCategoryDoesntExist = 27,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        TemplateDoesntExist = 28,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AssessmentSetDoesntExist = 29,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AssessmentSetDescriptionWithNameExists = 30,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ValueCategoryHasQuestions = 31,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        BuildingDoesntExist = 32,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SystemCatalogDescription", Namespace="http://schemas.datacontract.org/2004/07/ERDC.CERL.SMS.Libraries.DataContract.Cata" +
        "log")]
    [System.SerializableAttribute()]
    public partial class SystemCatalogDescription : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsUIIField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UIICodeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsUII {
            get {
                return this.IsUIIField;
            }
            set {
                if ((this.IsUIIField.Equals(value) != true)) {
                    this.IsUIIField = value;
                    this.RaisePropertyChanged("IsUII");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UIICode {
            get {
                return this.UIICodeField;
            }
            set {
                if ((object.ReferenceEquals(this.UIICodeField, value) != true)) {
                    this.UIICodeField = value;
                    this.RaisePropertyChanged("UIICode");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ComponentCatalogDescription", Namespace="http://schemas.datacontract.org/2004/07/ERDC.CERL.SMS.Libraries.DataContract.Cata" +
        "log")]
    [System.SerializableAttribute()]
    public partial class ComponentCatalogDescription : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsEquipField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsUIIField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SysIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UIICodeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsEquip {
            get {
                return this.IsEquipField;
            }
            set {
                if ((this.IsEquipField.Equals(value) != true)) {
                    this.IsEquipField = value;
                    this.RaisePropertyChanged("IsEquip");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsUII {
            get {
                return this.IsUIIField;
            }
            set {
                if ((this.IsUIIField.Equals(value) != true)) {
                    this.IsUIIField = value;
                    this.RaisePropertyChanged("IsUII");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SysId {
            get {
                return this.SysIdField;
            }
            set {
                if ((this.SysIdField.Equals(value) != true)) {
                    this.SysIdField = value;
                    this.RaisePropertyChanged("SysId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UIICode {
            get {
                return this.UIICodeField;
            }
            set {
                if ((object.ReferenceEquals(this.UIICodeField, value) != true)) {
                    this.UIICodeField = value;
                    this.RaisePropertyChanged("UIICode");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CMCDescription", Namespace="http://schemas.datacontract.org/2004/07/ERDC.CERL.SMS.Libraries.DataContract.Cata" +
        "log")]
    [System.SerializableAttribute()]
    public partial class CMCDescription : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float AdjFactorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float CIIField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid CIISetLinkField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CTypeLinkField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CompLinkField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CompUIILinkField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MCatLinkField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TaskListLinkField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int UoMField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int UseAltDescField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float AdjFactor {
            get {
                return this.AdjFactorField;
            }
            set {
                if ((this.AdjFactorField.Equals(value) != true)) {
                    this.AdjFactorField = value;
                    this.RaisePropertyChanged("AdjFactor");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float CII {
            get {
                return this.CIIField;
            }
            set {
                if ((this.CIIField.Equals(value) != true)) {
                    this.CIIField = value;
                    this.RaisePropertyChanged("CII");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid CIISetLink {
            get {
                return this.CIISetLinkField;
            }
            set {
                if ((this.CIISetLinkField.Equals(value) != true)) {
                    this.CIISetLinkField = value;
                    this.RaisePropertyChanged("CIISetLink");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CTypeLink {
            get {
                return this.CTypeLinkField;
            }
            set {
                if ((this.CTypeLinkField.Equals(value) != true)) {
                    this.CTypeLinkField = value;
                    this.RaisePropertyChanged("CTypeLink");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CompLink {
            get {
                return this.CompLinkField;
            }
            set {
                if ((this.CompLinkField.Equals(value) != true)) {
                    this.CompLinkField = value;
                    this.RaisePropertyChanged("CompLink");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CompUIILink {
            get {
                return this.CompUIILinkField;
            }
            set {
                if ((this.CompUIILinkField.Equals(value) != true)) {
                    this.CompUIILinkField = value;
                    this.RaisePropertyChanged("CompUIILink");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MCatLink {
            get {
                return this.MCatLinkField;
            }
            set {
                if ((this.MCatLinkField.Equals(value) != true)) {
                    this.MCatLinkField = value;
                    this.RaisePropertyChanged("MCatLink");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TaskListLink {
            get {
                return this.TaskListLinkField;
            }
            set {
                if ((this.TaskListLinkField.Equals(value) != true)) {
                    this.TaskListLinkField = value;
                    this.RaisePropertyChanged("TaskListLink");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UoM {
            get {
                return this.UoMField;
            }
            set {
                if ((this.UoMField.Equals(value) != true)) {
                    this.UoMField = value;
                    this.RaisePropertyChanged("UoM");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UseAltDesc {
            get {
                return this.UseAltDescField;
            }
            set {
                if ((this.UseAltDescField.Equals(value) != true)) {
                    this.UseAltDescField = value;
                    this.RaisePropertyChanged("UseAltDesc");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MaterialCategoryDescription", Namespace="http://schemas.datacontract.org/2004/07/ERDC.CERL.SMS.Libraries.DataContract.Cata" +
        "log")]
    [System.SerializableAttribute()]
    public partial class MaterialCategoryDescription : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CatDescField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CatDesc {
            get {
                return this.CatDescField;
            }
            set {
                if ((object.ReferenceEquals(this.CatDescField, value) != true)) {
                    this.CatDescField = value;
                    this.RaisePropertyChanged("CatDesc");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ComponentTypeDescription", Namespace="http://schemas.datacontract.org/2004/07/ERDC.CERL.SMS.Libraries.DataContract.Cata" +
        "log")]
    [System.SerializableAttribute()]
    public partial class ComponentTypeDescription : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SubComponentDescription", Namespace="http://schemas.datacontract.org/2004/07/ERDC.CERL.SMS.Libraries.DataContract.Cata" +
        "log")]
    [System.SerializableAttribute()]
    public partial class SubComponentDescription : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CompUnitsIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CompUnitsID {
            get {
                return this.CompUnitsIDField;
            }
            set {
                if ((this.CompUnitsIDField.Equals(value) != true)) {
                    this.CompUnitsIDField = value;
                    this.RaisePropertyChanged("CompUnitsID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="BUILDERCatalog.ICatalog")]
    public interface ICatalog {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICatalog/CreateCatalogSystem", ReplyAction="http://tempuri.org/ICatalog/CreateCatalogSystemResponse")]
        Catalog.Facade.BUILDERCatalog.IntResult CreateCatalogSystem(System.Guid SessionID, string desc, string uiicode, bool isUII);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICatalog/CreateCatalogSystem", ReplyAction="http://tempuri.org/ICatalog/CreateCatalogSystemResponse")]
        System.Threading.Tasks.Task<Catalog.Facade.BUILDERCatalog.IntResult> CreateCatalogSystemAsync(System.Guid SessionID, string desc, string uiicode, bool isUII);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICatalog/GetCatalogSystems", ReplyAction="http://tempuri.org/ICatalog/GetCatalogSystemsResponse")]
        Catalog.Facade.BUILDERCatalog.SystemCatalogResult GetCatalogSystems(System.Guid SessionID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICatalog/GetCatalogSystems", ReplyAction="http://tempuri.org/ICatalog/GetCatalogSystemsResponse")]
        System.Threading.Tasks.Task<Catalog.Facade.BUILDERCatalog.SystemCatalogResult> GetCatalogSystemsAsync(System.Guid SessionID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICatalog/GetCatalogSystem", ReplyAction="http://tempuri.org/ICatalog/GetCatalogSystemResponse")]
        Catalog.Facade.BUILDERCatalog.SystemCatalogResult GetCatalogSystem(System.Guid SessionID, int sysId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICatalog/GetCatalogSystem", ReplyAction="http://tempuri.org/ICatalog/GetCatalogSystemResponse")]
        System.Threading.Tasks.Task<Catalog.Facade.BUILDERCatalog.SystemCatalogResult> GetCatalogSystemAsync(System.Guid SessionID, int sysId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICatalog/UpdateCatalogSystem", ReplyAction="http://tempuri.org/ICatalog/UpdateCatalogSystemResponse")]
        Catalog.Facade.BUILDERCatalog.FunctionResultMessage UpdateCatalogSystem(System.Guid SessionID, Catalog.Facade.BUILDERCatalog.SystemCatalogDescription sysUpdates);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICatalog/UpdateCatalogSystem", ReplyAction="http://tempuri.org/ICatalog/UpdateCatalogSystemResponse")]
        System.Threading.Tasks.Task<Catalog.Facade.BUILDERCatalog.FunctionResultMessage> UpdateCatalogSystemAsync(System.Guid SessionID, Catalog.Facade.BUILDERCatalog.SystemCatalogDescription sysUpdates);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICatalog/DeleteCatalogSystem", ReplyAction="http://tempuri.org/ICatalog/DeleteCatalogSystemResponse")]
        Catalog.Facade.BUILDERCatalog.FunctionResultMessage DeleteCatalogSystem(System.Guid SessionID, int sysId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICatalog/DeleteCatalogSystem", ReplyAction="http://tempuri.org/ICatalog/DeleteCatalogSystemResponse")]
        System.Threading.Tasks.Task<Catalog.Facade.BUILDERCatalog.FunctionResultMessage> DeleteCatalogSystemAsync(System.Guid SessionID, int sysId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICatalog/CreateCatalogComponent", ReplyAction="http://tempuri.org/ICatalog/CreateCatalogComponentResponse")]
        Catalog.Facade.BUILDERCatalog.IntResult CreateCatalogComponent(System.Guid SessionID, string desc, int sysLink, bool isUII, string UIICode, bool isEquip);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICatalog/CreateCatalogComponent", ReplyAction="http://tempuri.org/ICatalog/CreateCatalogComponentResponse")]
        System.Threading.Tasks.Task<Catalog.Facade.BUILDERCatalog.IntResult> CreateCatalogComponentAsync(System.Guid SessionID, string desc, int sysLink, bool isUII, string UIICode, bool isEquip);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICatalog/GetCatalogComponents", ReplyAction="http://tempuri.org/ICatalog/GetCatalogComponentsResponse")]
        Catalog.Facade.BUILDERCatalog.ComponentCatalogResult GetCatalogComponents(System.Guid SessionID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICatalog/GetCatalogComponents", ReplyAction="http://tempuri.org/ICatalog/GetCatalogComponentsResponse")]
        System.Threading.Tasks.Task<Catalog.Facade.BUILDERCatalog.ComponentCatalogResult> GetCatalogComponentsAsync(System.Guid SessionID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICatalog/GetCatalogComponent", ReplyAction="http://tempuri.org/ICatalog/GetCatalogComponentResponse")]
        Catalog.Facade.BUILDERCatalog.ComponentCatalogResult GetCatalogComponent(System.Guid SessionID, int compId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICatalog/GetCatalogComponent", ReplyAction="http://tempuri.org/ICatalog/GetCatalogComponentResponse")]
        System.Threading.Tasks.Task<Catalog.Facade.BUILDERCatalog.ComponentCatalogResult> GetCatalogComponentAsync(System.Guid SessionID, int compId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICatalog/UpdateCatalogComponent", ReplyAction="http://tempuri.org/ICatalog/UpdateCatalogComponentResponse")]
        Catalog.Facade.BUILDERCatalog.FunctionResultMessage UpdateCatalogComponent(System.Guid SessionID, Catalog.Facade.BUILDERCatalog.ComponentCatalogDescription compUpdates);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICatalog/UpdateCatalogComponent", ReplyAction="http://tempuri.org/ICatalog/UpdateCatalogComponentResponse")]
        System.Threading.Tasks.Task<Catalog.Facade.BUILDERCatalog.FunctionResultMessage> UpdateCatalogComponentAsync(System.Guid SessionID, Catalog.Facade.BUILDERCatalog.ComponentCatalogDescription compUpdates);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICatalog/DeleteCatalogComponent", ReplyAction="http://tempuri.org/ICatalog/DeleteCatalogComponentResponse")]
        Catalog.Facade.BUILDERCatalog.FunctionResultMessage DeleteCatalogComponent(System.Guid SessionID, int compId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICatalog/DeleteCatalogComponent", ReplyAction="http://tempuri.org/ICatalog/DeleteCatalogComponentResponse")]
        System.Threading.Tasks.Task<Catalog.Facade.BUILDERCatalog.FunctionResultMessage> DeleteCatalogComponentAsync(System.Guid SessionID, int compId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICatalog/CreateCMC", ReplyAction="http://tempuri.org/ICatalog/CreateCMCResponse")]
        Catalog.Facade.BUILDERCatalog.IntResult CreateCMC(System.Guid SessionID, int CompLink, int MatCatLink, int CompType, int UoM, int UIILink, float AdjFactor, float CII, int UseAltDesc, int TaskListLink, System.Guid CIISetLink);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICatalog/CreateCMC", ReplyAction="http://tempuri.org/ICatalog/CreateCMCResponse")]
        System.Threading.Tasks.Task<Catalog.Facade.BUILDERCatalog.IntResult> CreateCMCAsync(System.Guid SessionID, int CompLink, int MatCatLink, int CompType, int UoM, int UIILink, float AdjFactor, float CII, int UseAltDesc, int TaskListLink, System.Guid CIISetLink);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICatalog/GetAllCMC", ReplyAction="http://tempuri.org/ICatalog/GetAllCMCResponse")]
        Catalog.Facade.BUILDERCatalog.CMCResult GetAllCMC(System.Guid SessionID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICatalog/GetAllCMC", ReplyAction="http://tempuri.org/ICatalog/GetAllCMCResponse")]
        System.Threading.Tasks.Task<Catalog.Facade.BUILDERCatalog.CMCResult> GetAllCMCAsync(System.Guid SessionID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICatalog/GetCMC", ReplyAction="http://tempuri.org/ICatalog/GetCMCResponse")]
        Catalog.Facade.BUILDERCatalog.CMCResult GetCMC(System.Guid SessionID, int CMCID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICatalog/GetCMC", ReplyAction="http://tempuri.org/ICatalog/GetCMCResponse")]
        System.Threading.Tasks.Task<Catalog.Facade.BUILDERCatalog.CMCResult> GetCMCAsync(System.Guid SessionID, int CMCID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICatalog/UpdateCMC", ReplyAction="http://tempuri.org/ICatalog/UpdateCMCResponse")]
        Catalog.Facade.BUILDERCatalog.FunctionResultMessage UpdateCMC(System.Guid SessionID, Catalog.Facade.BUILDERCatalog.CMCDescription cmcUpdates);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICatalog/UpdateCMC", ReplyAction="http://tempuri.org/ICatalog/UpdateCMCResponse")]
        System.Threading.Tasks.Task<Catalog.Facade.BUILDERCatalog.FunctionResultMessage> UpdateCMCAsync(System.Guid SessionID, Catalog.Facade.BUILDERCatalog.CMCDescription cmcUpdates);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICatalog/DeleteCMC", ReplyAction="http://tempuri.org/ICatalog/DeleteCMCResponse")]
        Catalog.Facade.BUILDERCatalog.FunctionResultMessage DeleteCMC(System.Guid SessionID, int CMCID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICatalog/DeleteCMC", ReplyAction="http://tempuri.org/ICatalog/DeleteCMCResponse")]
        System.Threading.Tasks.Task<Catalog.Facade.BUILDERCatalog.FunctionResultMessage> DeleteCMCAsync(System.Guid SessionID, int CMCID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICatalog/CreateCatalogMaterialCategory", ReplyAction="http://tempuri.org/ICatalog/CreateCatalogMaterialCategoryResponse")]
        Catalog.Facade.BUILDERCatalog.IntResult CreateCatalogMaterialCategory(System.Guid SessionID, string desc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICatalog/CreateCatalogMaterialCategory", ReplyAction="http://tempuri.org/ICatalog/CreateCatalogMaterialCategoryResponse")]
        System.Threading.Tasks.Task<Catalog.Facade.BUILDERCatalog.IntResult> CreateCatalogMaterialCategoryAsync(System.Guid SessionID, string desc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICatalog/GetCatalogMaterialCategories", ReplyAction="http://tempuri.org/ICatalog/GetCatalogMaterialCategoriesResponse")]
        Catalog.Facade.BUILDERCatalog.MaterialCategoryCatalogResult GetCatalogMaterialCategories(System.Guid SessionID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICatalog/GetCatalogMaterialCategories", ReplyAction="http://tempuri.org/ICatalog/GetCatalogMaterialCategoriesResponse")]
        System.Threading.Tasks.Task<Catalog.Facade.BUILDERCatalog.MaterialCategoryCatalogResult> GetCatalogMaterialCategoriesAsync(System.Guid SessionID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICatalog/GetCatalogMaterialCategory", ReplyAction="http://tempuri.org/ICatalog/GetCatalogMaterialCategoryResponse")]
        Catalog.Facade.BUILDERCatalog.MaterialCategoryCatalogResult GetCatalogMaterialCategory(System.Guid SessionID, int matCatId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICatalog/GetCatalogMaterialCategory", ReplyAction="http://tempuri.org/ICatalog/GetCatalogMaterialCategoryResponse")]
        System.Threading.Tasks.Task<Catalog.Facade.BUILDERCatalog.MaterialCategoryCatalogResult> GetCatalogMaterialCategoryAsync(System.Guid SessionID, int matCatId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICatalog/UpdateCatalogMaterialCategory", ReplyAction="http://tempuri.org/ICatalog/UpdateCatalogMaterialCategoryResponse")]
        Catalog.Facade.BUILDERCatalog.FunctionResultMessage UpdateCatalogMaterialCategory(System.Guid SessionID, Catalog.Facade.BUILDERCatalog.MaterialCategoryDescription matCatUpdates);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICatalog/UpdateCatalogMaterialCategory", ReplyAction="http://tempuri.org/ICatalog/UpdateCatalogMaterialCategoryResponse")]
        System.Threading.Tasks.Task<Catalog.Facade.BUILDERCatalog.FunctionResultMessage> UpdateCatalogMaterialCategoryAsync(System.Guid SessionID, Catalog.Facade.BUILDERCatalog.MaterialCategoryDescription matCatUpdates);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICatalog/DeleteCatalogMaterialCategory", ReplyAction="http://tempuri.org/ICatalog/DeleteCatalogMaterialCategoryResponse")]
        Catalog.Facade.BUILDERCatalog.FunctionResultMessage DeleteCatalogMaterialCategory(System.Guid SessionID, int matCatId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICatalog/DeleteCatalogMaterialCategory", ReplyAction="http://tempuri.org/ICatalog/DeleteCatalogMaterialCategoryResponse")]
        System.Threading.Tasks.Task<Catalog.Facade.BUILDERCatalog.FunctionResultMessage> DeleteCatalogMaterialCategoryAsync(System.Guid SessionID, int matCatId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICatalog/CreateCatalogComponentType", ReplyAction="http://tempuri.org/ICatalog/CreateCatalogComponentTypeResponse")]
        Catalog.Facade.BUILDERCatalog.IntResult CreateCatalogComponentType(System.Guid SessionID, string desc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICatalog/CreateCatalogComponentType", ReplyAction="http://tempuri.org/ICatalog/CreateCatalogComponentTypeResponse")]
        System.Threading.Tasks.Task<Catalog.Facade.BUILDERCatalog.IntResult> CreateCatalogComponentTypeAsync(System.Guid SessionID, string desc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICatalog/GetCatalogComponentTypes", ReplyAction="http://tempuri.org/ICatalog/GetCatalogComponentTypesResponse")]
        Catalog.Facade.BUILDERCatalog.ComponentTypeCatalogResult GetCatalogComponentTypes(System.Guid SessionID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICatalog/GetCatalogComponentTypes", ReplyAction="http://tempuri.org/ICatalog/GetCatalogComponentTypesResponse")]
        System.Threading.Tasks.Task<Catalog.Facade.BUILDERCatalog.ComponentTypeCatalogResult> GetCatalogComponentTypesAsync(System.Guid SessionID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICatalog/GetCatalogComponentType", ReplyAction="http://tempuri.org/ICatalog/GetCatalogComponentTypeResponse")]
        Catalog.Facade.BUILDERCatalog.ComponentTypeCatalogResult GetCatalogComponentType(System.Guid SessionID, int compTypeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICatalog/GetCatalogComponentType", ReplyAction="http://tempuri.org/ICatalog/GetCatalogComponentTypeResponse")]
        System.Threading.Tasks.Task<Catalog.Facade.BUILDERCatalog.ComponentTypeCatalogResult> GetCatalogComponentTypeAsync(System.Guid SessionID, int compTypeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICatalog/UpdateCatalogComponentType", ReplyAction="http://tempuri.org/ICatalog/UpdateCatalogComponentTypeResponse")]
        Catalog.Facade.BUILDERCatalog.FunctionResultMessage UpdateCatalogComponentType(System.Guid SessionID, Catalog.Facade.BUILDERCatalog.ComponentTypeDescription compTypeUpdates);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICatalog/UpdateCatalogComponentType", ReplyAction="http://tempuri.org/ICatalog/UpdateCatalogComponentTypeResponse")]
        System.Threading.Tasks.Task<Catalog.Facade.BUILDERCatalog.FunctionResultMessage> UpdateCatalogComponentTypeAsync(System.Guid SessionID, Catalog.Facade.BUILDERCatalog.ComponentTypeDescription compTypeUpdates);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICatalog/DeleteCatalogComponentType", ReplyAction="http://tempuri.org/ICatalog/DeleteCatalogComponentTypeResponse")]
        Catalog.Facade.BUILDERCatalog.FunctionResultMessage DeleteCatalogComponentType(System.Guid SessionID, int compTypeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICatalog/DeleteCatalogComponentType", ReplyAction="http://tempuri.org/ICatalog/DeleteCatalogComponentTypeResponse")]
        System.Threading.Tasks.Task<Catalog.Facade.BUILDERCatalog.FunctionResultMessage> DeleteCatalogComponentTypeAsync(System.Guid SessionID, int compTypeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICatalog/CreateCatalogSubComponent", ReplyAction="http://tempuri.org/ICatalog/CreateCatalogSubComponentResponse")]
        Catalog.Facade.BUILDERCatalog.IntResult CreateCatalogSubComponent(System.Guid SessionID, string desc, int unitID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICatalog/CreateCatalogSubComponent", ReplyAction="http://tempuri.org/ICatalog/CreateCatalogSubComponentResponse")]
        System.Threading.Tasks.Task<Catalog.Facade.BUILDERCatalog.IntResult> CreateCatalogSubComponentAsync(System.Guid SessionID, string desc, int unitID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICatalog/GetCatalogSubComponents", ReplyAction="http://tempuri.org/ICatalog/GetCatalogSubComponentsResponse")]
        Catalog.Facade.BUILDERCatalog.SubComponentCatalogResult GetCatalogSubComponents(System.Guid SessionID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICatalog/GetCatalogSubComponents", ReplyAction="http://tempuri.org/ICatalog/GetCatalogSubComponentsResponse")]
        System.Threading.Tasks.Task<Catalog.Facade.BUILDERCatalog.SubComponentCatalogResult> GetCatalogSubComponentsAsync(System.Guid SessionID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICatalog/GetCatalogSubComponent", ReplyAction="http://tempuri.org/ICatalog/GetCatalogSubComponentResponse")]
        Catalog.Facade.BUILDERCatalog.SubComponentCatalogResult GetCatalogSubComponent(System.Guid SessionID, int subCompId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICatalog/GetCatalogSubComponent", ReplyAction="http://tempuri.org/ICatalog/GetCatalogSubComponentResponse")]
        System.Threading.Tasks.Task<Catalog.Facade.BUILDERCatalog.SubComponentCatalogResult> GetCatalogSubComponentAsync(System.Guid SessionID, int subCompId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICatalog/UpdateCatalogSubComponent", ReplyAction="http://tempuri.org/ICatalog/UpdateCatalogSubComponentResponse")]
        Catalog.Facade.BUILDERCatalog.FunctionResultMessage UpdateCatalogSubComponent(System.Guid SessionID, Catalog.Facade.BUILDERCatalog.SubComponentDescription subCompUpdates);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICatalog/UpdateCatalogSubComponent", ReplyAction="http://tempuri.org/ICatalog/UpdateCatalogSubComponentResponse")]
        System.Threading.Tasks.Task<Catalog.Facade.BUILDERCatalog.FunctionResultMessage> UpdateCatalogSubComponentAsync(System.Guid SessionID, Catalog.Facade.BUILDERCatalog.SubComponentDescription subCompUpdates);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICatalog/DeleteCatalogSubComponent", ReplyAction="http://tempuri.org/ICatalog/DeleteCatalogSubComponentResponse")]
        Catalog.Facade.BUILDERCatalog.FunctionResultMessage DeleteCatalogSubComponent(System.Guid SessionID, int subCompId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICatalog/DeleteCatalogSubComponent", ReplyAction="http://tempuri.org/ICatalog/DeleteCatalogSubComponentResponse")]
        System.Threading.Tasks.Task<Catalog.Facade.BUILDERCatalog.FunctionResultMessage> DeleteCatalogSubComponentAsync(System.Guid SessionID, int subCompId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICatalogChannel : Catalog.Facade.BUILDERCatalog.ICatalog, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CatalogClient : System.ServiceModel.ClientBase<Catalog.Facade.BUILDERCatalog.ICatalog>, Catalog.Facade.BUILDERCatalog.ICatalog {
        
        public CatalogClient() {
        }
        
        public CatalogClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CatalogClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CatalogClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CatalogClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Catalog.Facade.BUILDERCatalog.IntResult CreateCatalogSystem(System.Guid SessionID, string desc, string uiicode, bool isUII) {
            return base.Channel.CreateCatalogSystem(SessionID, desc, uiicode, isUII);
        }
        
        public System.Threading.Tasks.Task<Catalog.Facade.BUILDERCatalog.IntResult> CreateCatalogSystemAsync(System.Guid SessionID, string desc, string uiicode, bool isUII) {
            return base.Channel.CreateCatalogSystemAsync(SessionID, desc, uiicode, isUII);
        }
        
        public Catalog.Facade.BUILDERCatalog.SystemCatalogResult GetCatalogSystems(System.Guid SessionID) {
            return base.Channel.GetCatalogSystems(SessionID);
        }
        
        public System.Threading.Tasks.Task<Catalog.Facade.BUILDERCatalog.SystemCatalogResult> GetCatalogSystemsAsync(System.Guid SessionID) {
            return base.Channel.GetCatalogSystemsAsync(SessionID);
        }
        
        public Catalog.Facade.BUILDERCatalog.SystemCatalogResult GetCatalogSystem(System.Guid SessionID, int sysId) {
            return base.Channel.GetCatalogSystem(SessionID, sysId);
        }
        
        public System.Threading.Tasks.Task<Catalog.Facade.BUILDERCatalog.SystemCatalogResult> GetCatalogSystemAsync(System.Guid SessionID, int sysId) {
            return base.Channel.GetCatalogSystemAsync(SessionID, sysId);
        }
        
        public Catalog.Facade.BUILDERCatalog.FunctionResultMessage UpdateCatalogSystem(System.Guid SessionID, Catalog.Facade.BUILDERCatalog.SystemCatalogDescription sysUpdates) {
            return base.Channel.UpdateCatalogSystem(SessionID, sysUpdates);
        }
        
        public System.Threading.Tasks.Task<Catalog.Facade.BUILDERCatalog.FunctionResultMessage> UpdateCatalogSystemAsync(System.Guid SessionID, Catalog.Facade.BUILDERCatalog.SystemCatalogDescription sysUpdates) {
            return base.Channel.UpdateCatalogSystemAsync(SessionID, sysUpdates);
        }
        
        public Catalog.Facade.BUILDERCatalog.FunctionResultMessage DeleteCatalogSystem(System.Guid SessionID, int sysId) {
            return base.Channel.DeleteCatalogSystem(SessionID, sysId);
        }
        
        public System.Threading.Tasks.Task<Catalog.Facade.BUILDERCatalog.FunctionResultMessage> DeleteCatalogSystemAsync(System.Guid SessionID, int sysId) {
            return base.Channel.DeleteCatalogSystemAsync(SessionID, sysId);
        }
        
        public Catalog.Facade.BUILDERCatalog.IntResult CreateCatalogComponent(System.Guid SessionID, string desc, int sysLink, bool isUII, string UIICode, bool isEquip) {
            return base.Channel.CreateCatalogComponent(SessionID, desc, sysLink, isUII, UIICode, isEquip);
        }
        
        public System.Threading.Tasks.Task<Catalog.Facade.BUILDERCatalog.IntResult> CreateCatalogComponentAsync(System.Guid SessionID, string desc, int sysLink, bool isUII, string UIICode, bool isEquip) {
            return base.Channel.CreateCatalogComponentAsync(SessionID, desc, sysLink, isUII, UIICode, isEquip);
        }
        
        public Catalog.Facade.BUILDERCatalog.ComponentCatalogResult GetCatalogComponents(System.Guid SessionID) {
            return base.Channel.GetCatalogComponents(SessionID);
        }
        
        public System.Threading.Tasks.Task<Catalog.Facade.BUILDERCatalog.ComponentCatalogResult> GetCatalogComponentsAsync(System.Guid SessionID) {
            return base.Channel.GetCatalogComponentsAsync(SessionID);
        }
        
        public Catalog.Facade.BUILDERCatalog.ComponentCatalogResult GetCatalogComponent(System.Guid SessionID, int compId) {
            return base.Channel.GetCatalogComponent(SessionID, compId);
        }
        
        public System.Threading.Tasks.Task<Catalog.Facade.BUILDERCatalog.ComponentCatalogResult> GetCatalogComponentAsync(System.Guid SessionID, int compId) {
            return base.Channel.GetCatalogComponentAsync(SessionID, compId);
        }
        
        public Catalog.Facade.BUILDERCatalog.FunctionResultMessage UpdateCatalogComponent(System.Guid SessionID, Catalog.Facade.BUILDERCatalog.ComponentCatalogDescription compUpdates) {
            return base.Channel.UpdateCatalogComponent(SessionID, compUpdates);
        }
        
        public System.Threading.Tasks.Task<Catalog.Facade.BUILDERCatalog.FunctionResultMessage> UpdateCatalogComponentAsync(System.Guid SessionID, Catalog.Facade.BUILDERCatalog.ComponentCatalogDescription compUpdates) {
            return base.Channel.UpdateCatalogComponentAsync(SessionID, compUpdates);
        }
        
        public Catalog.Facade.BUILDERCatalog.FunctionResultMessage DeleteCatalogComponent(System.Guid SessionID, int compId) {
            return base.Channel.DeleteCatalogComponent(SessionID, compId);
        }
        
        public System.Threading.Tasks.Task<Catalog.Facade.BUILDERCatalog.FunctionResultMessage> DeleteCatalogComponentAsync(System.Guid SessionID, int compId) {
            return base.Channel.DeleteCatalogComponentAsync(SessionID, compId);
        }
        
        public Catalog.Facade.BUILDERCatalog.IntResult CreateCMC(System.Guid SessionID, int CompLink, int MatCatLink, int CompType, int UoM, int UIILink, float AdjFactor, float CII, int UseAltDesc, int TaskListLink, System.Guid CIISetLink) {
            return base.Channel.CreateCMC(SessionID, CompLink, MatCatLink, CompType, UoM, UIILink, AdjFactor, CII, UseAltDesc, TaskListLink, CIISetLink);
        }
        
        public System.Threading.Tasks.Task<Catalog.Facade.BUILDERCatalog.IntResult> CreateCMCAsync(System.Guid SessionID, int CompLink, int MatCatLink, int CompType, int UoM, int UIILink, float AdjFactor, float CII, int UseAltDesc, int TaskListLink, System.Guid CIISetLink) {
            return base.Channel.CreateCMCAsync(SessionID, CompLink, MatCatLink, CompType, UoM, UIILink, AdjFactor, CII, UseAltDesc, TaskListLink, CIISetLink);
        }
        
        public Catalog.Facade.BUILDERCatalog.CMCResult GetAllCMC(System.Guid SessionID) {
            return base.Channel.GetAllCMC(SessionID);
        }
        
        public System.Threading.Tasks.Task<Catalog.Facade.BUILDERCatalog.CMCResult> GetAllCMCAsync(System.Guid SessionID) {
            return base.Channel.GetAllCMCAsync(SessionID);
        }
        
        public Catalog.Facade.BUILDERCatalog.CMCResult GetCMC(System.Guid SessionID, int CMCID) {
            return base.Channel.GetCMC(SessionID, CMCID);
        }
        
        public System.Threading.Tasks.Task<Catalog.Facade.BUILDERCatalog.CMCResult> GetCMCAsync(System.Guid SessionID, int CMCID) {
            return base.Channel.GetCMCAsync(SessionID, CMCID);
        }
        
        public Catalog.Facade.BUILDERCatalog.FunctionResultMessage UpdateCMC(System.Guid SessionID, Catalog.Facade.BUILDERCatalog.CMCDescription cmcUpdates) {
            return base.Channel.UpdateCMC(SessionID, cmcUpdates);
        }
        
        public System.Threading.Tasks.Task<Catalog.Facade.BUILDERCatalog.FunctionResultMessage> UpdateCMCAsync(System.Guid SessionID, Catalog.Facade.BUILDERCatalog.CMCDescription cmcUpdates) {
            return base.Channel.UpdateCMCAsync(SessionID, cmcUpdates);
        }
        
        public Catalog.Facade.BUILDERCatalog.FunctionResultMessage DeleteCMC(System.Guid SessionID, int CMCID) {
            return base.Channel.DeleteCMC(SessionID, CMCID);
        }
        
        public System.Threading.Tasks.Task<Catalog.Facade.BUILDERCatalog.FunctionResultMessage> DeleteCMCAsync(System.Guid SessionID, int CMCID) {
            return base.Channel.DeleteCMCAsync(SessionID, CMCID);
        }
        
        public Catalog.Facade.BUILDERCatalog.IntResult CreateCatalogMaterialCategory(System.Guid SessionID, string desc) {
            return base.Channel.CreateCatalogMaterialCategory(SessionID, desc);
        }
        
        public System.Threading.Tasks.Task<Catalog.Facade.BUILDERCatalog.IntResult> CreateCatalogMaterialCategoryAsync(System.Guid SessionID, string desc) {
            return base.Channel.CreateCatalogMaterialCategoryAsync(SessionID, desc);
        }
        
        public Catalog.Facade.BUILDERCatalog.MaterialCategoryCatalogResult GetCatalogMaterialCategories(System.Guid SessionID) {
            return base.Channel.GetCatalogMaterialCategories(SessionID);
        }
        
        public System.Threading.Tasks.Task<Catalog.Facade.BUILDERCatalog.MaterialCategoryCatalogResult> GetCatalogMaterialCategoriesAsync(System.Guid SessionID) {
            return base.Channel.GetCatalogMaterialCategoriesAsync(SessionID);
        }
        
        public Catalog.Facade.BUILDERCatalog.MaterialCategoryCatalogResult GetCatalogMaterialCategory(System.Guid SessionID, int matCatId) {
            return base.Channel.GetCatalogMaterialCategory(SessionID, matCatId);
        }
        
        public System.Threading.Tasks.Task<Catalog.Facade.BUILDERCatalog.MaterialCategoryCatalogResult> GetCatalogMaterialCategoryAsync(System.Guid SessionID, int matCatId) {
            return base.Channel.GetCatalogMaterialCategoryAsync(SessionID, matCatId);
        }
        
        public Catalog.Facade.BUILDERCatalog.FunctionResultMessage UpdateCatalogMaterialCategory(System.Guid SessionID, Catalog.Facade.BUILDERCatalog.MaterialCategoryDescription matCatUpdates) {
            return base.Channel.UpdateCatalogMaterialCategory(SessionID, matCatUpdates);
        }
        
        public System.Threading.Tasks.Task<Catalog.Facade.BUILDERCatalog.FunctionResultMessage> UpdateCatalogMaterialCategoryAsync(System.Guid SessionID, Catalog.Facade.BUILDERCatalog.MaterialCategoryDescription matCatUpdates) {
            return base.Channel.UpdateCatalogMaterialCategoryAsync(SessionID, matCatUpdates);
        }
        
        public Catalog.Facade.BUILDERCatalog.FunctionResultMessage DeleteCatalogMaterialCategory(System.Guid SessionID, int matCatId) {
            return base.Channel.DeleteCatalogMaterialCategory(SessionID, matCatId);
        }
        
        public System.Threading.Tasks.Task<Catalog.Facade.BUILDERCatalog.FunctionResultMessage> DeleteCatalogMaterialCategoryAsync(System.Guid SessionID, int matCatId) {
            return base.Channel.DeleteCatalogMaterialCategoryAsync(SessionID, matCatId);
        }
        
        public Catalog.Facade.BUILDERCatalog.IntResult CreateCatalogComponentType(System.Guid SessionID, string desc) {
            return base.Channel.CreateCatalogComponentType(SessionID, desc);
        }
        
        public System.Threading.Tasks.Task<Catalog.Facade.BUILDERCatalog.IntResult> CreateCatalogComponentTypeAsync(System.Guid SessionID, string desc) {
            return base.Channel.CreateCatalogComponentTypeAsync(SessionID, desc);
        }
        
        public Catalog.Facade.BUILDERCatalog.ComponentTypeCatalogResult GetCatalogComponentTypes(System.Guid SessionID) {
            return base.Channel.GetCatalogComponentTypes(SessionID);
        }
        
        public System.Threading.Tasks.Task<Catalog.Facade.BUILDERCatalog.ComponentTypeCatalogResult> GetCatalogComponentTypesAsync(System.Guid SessionID) {
            return base.Channel.GetCatalogComponentTypesAsync(SessionID);
        }
        
        public Catalog.Facade.BUILDERCatalog.ComponentTypeCatalogResult GetCatalogComponentType(System.Guid SessionID, int compTypeId) {
            return base.Channel.GetCatalogComponentType(SessionID, compTypeId);
        }
        
        public System.Threading.Tasks.Task<Catalog.Facade.BUILDERCatalog.ComponentTypeCatalogResult> GetCatalogComponentTypeAsync(System.Guid SessionID, int compTypeId) {
            return base.Channel.GetCatalogComponentTypeAsync(SessionID, compTypeId);
        }
        
        public Catalog.Facade.BUILDERCatalog.FunctionResultMessage UpdateCatalogComponentType(System.Guid SessionID, Catalog.Facade.BUILDERCatalog.ComponentTypeDescription compTypeUpdates) {
            return base.Channel.UpdateCatalogComponentType(SessionID, compTypeUpdates);
        }
        
        public System.Threading.Tasks.Task<Catalog.Facade.BUILDERCatalog.FunctionResultMessage> UpdateCatalogComponentTypeAsync(System.Guid SessionID, Catalog.Facade.BUILDERCatalog.ComponentTypeDescription compTypeUpdates) {
            return base.Channel.UpdateCatalogComponentTypeAsync(SessionID, compTypeUpdates);
        }
        
        public Catalog.Facade.BUILDERCatalog.FunctionResultMessage DeleteCatalogComponentType(System.Guid SessionID, int compTypeId) {
            return base.Channel.DeleteCatalogComponentType(SessionID, compTypeId);
        }
        
        public System.Threading.Tasks.Task<Catalog.Facade.BUILDERCatalog.FunctionResultMessage> DeleteCatalogComponentTypeAsync(System.Guid SessionID, int compTypeId) {
            return base.Channel.DeleteCatalogComponentTypeAsync(SessionID, compTypeId);
        }
        
        public Catalog.Facade.BUILDERCatalog.IntResult CreateCatalogSubComponent(System.Guid SessionID, string desc, int unitID) {
            return base.Channel.CreateCatalogSubComponent(SessionID, desc, unitID);
        }
        
        public System.Threading.Tasks.Task<Catalog.Facade.BUILDERCatalog.IntResult> CreateCatalogSubComponentAsync(System.Guid SessionID, string desc, int unitID) {
            return base.Channel.CreateCatalogSubComponentAsync(SessionID, desc, unitID);
        }
        
        public Catalog.Facade.BUILDERCatalog.SubComponentCatalogResult GetCatalogSubComponents(System.Guid SessionID) {
            return base.Channel.GetCatalogSubComponents(SessionID);
        }
        
        public System.Threading.Tasks.Task<Catalog.Facade.BUILDERCatalog.SubComponentCatalogResult> GetCatalogSubComponentsAsync(System.Guid SessionID) {
            return base.Channel.GetCatalogSubComponentsAsync(SessionID);
        }
        
        public Catalog.Facade.BUILDERCatalog.SubComponentCatalogResult GetCatalogSubComponent(System.Guid SessionID, int subCompId) {
            return base.Channel.GetCatalogSubComponent(SessionID, subCompId);
        }
        
        public System.Threading.Tasks.Task<Catalog.Facade.BUILDERCatalog.SubComponentCatalogResult> GetCatalogSubComponentAsync(System.Guid SessionID, int subCompId) {
            return base.Channel.GetCatalogSubComponentAsync(SessionID, subCompId);
        }
        
        public Catalog.Facade.BUILDERCatalog.FunctionResultMessage UpdateCatalogSubComponent(System.Guid SessionID, Catalog.Facade.BUILDERCatalog.SubComponentDescription subCompUpdates) {
            return base.Channel.UpdateCatalogSubComponent(SessionID, subCompUpdates);
        }
        
        public System.Threading.Tasks.Task<Catalog.Facade.BUILDERCatalog.FunctionResultMessage> UpdateCatalogSubComponentAsync(System.Guid SessionID, Catalog.Facade.BUILDERCatalog.SubComponentDescription subCompUpdates) {
            return base.Channel.UpdateCatalogSubComponentAsync(SessionID, subCompUpdates);
        }
        
        public Catalog.Facade.BUILDERCatalog.FunctionResultMessage DeleteCatalogSubComponent(System.Guid SessionID, int subCompId) {
            return base.Channel.DeleteCatalogSubComponent(SessionID, subCompId);
        }
        
        public System.Threading.Tasks.Task<Catalog.Facade.BUILDERCatalog.FunctionResultMessage> DeleteCatalogSubComponentAsync(System.Guid SessionID, int subCompId) {
            return base.Channel.DeleteCatalogSubComponentAsync(SessionID, subCompId);
        }
    }
}
